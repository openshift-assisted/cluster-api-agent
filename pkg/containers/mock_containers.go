// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package containers is a generated GoMock package.
package containers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	authn "github.com/google/go-containerregistry/pkg/authn"
	v1 "github.com/google/go-containerregistry/pkg/v1"
)

// MockRemoteImage is a mock of RemoteImage interface.
type MockRemoteImage struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteImageMockRecorder
}

// MockRemoteImageMockRecorder is the mock recorder for MockRemoteImage.
type MockRemoteImageMockRecorder struct {
	mock *MockRemoteImage
}

// NewMockRemoteImage creates a new mock instance.
func NewMockRemoteImage(ctrl *gomock.Controller) *MockRemoteImage {
	mock := &MockRemoteImage{ctrl: ctrl}
	mock.recorder = &MockRemoteImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteImage) EXPECT() *MockRemoteImageMockRecorder {
	return m.recorder
}

// GetDigest mocks base method.
func (m *MockRemoteImage) GetDigest(imageRef string, keychain authn.Keychain) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDigest", imageRef, keychain)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDigest indicates an expected call of GetDigest.
func (mr *MockRemoteImageMockRecorder) GetDigest(imageRef, keychain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDigest", reflect.TypeOf((*MockRemoteImage)(nil).GetDigest), imageRef, keychain)
}

// GetImage mocks base method.
func (m *MockRemoteImage) GetImage(imageRef string, keychain authn.Keychain) (v1.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", imageRef, keychain)
	ret0, _ := ret[0].(v1.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockRemoteImageMockRecorder) GetImage(imageRef, keychain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockRemoteImage)(nil).GetImage), imageRef, keychain)
}

// MockContainerImage is a mock of ContainerImage interface.
type MockContainerImage struct {
	ctrl     *gomock.Controller
	recorder *MockContainerImageMockRecorder
}

// MockContainerImageMockRecorder is the mock recorder for MockContainerImage.
type MockContainerImageMockRecorder struct {
	mock *MockContainerImage
}

// NewMockContainerImage creates a new mock instance.
func NewMockContainerImage(ctrl *gomock.Controller) *MockContainerImage {
	mock := &MockContainerImage{ctrl: ctrl}
	mock.recorder = &MockContainerImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerImage) EXPECT() *MockContainerImageMockRecorder {
	return m.recorder
}

// ExtractFileFromImage mocks base method.
func (m *MockContainerImage) ExtractFileFromImage(filePath string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractFileFromImage", filePath)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractFileFromImage indicates an expected call of ExtractFileFromImage.
func (mr *MockContainerImageMockRecorder) ExtractFileFromImage(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractFileFromImage", reflect.TypeOf((*MockContainerImage)(nil).ExtractFileFromImage), filePath)
}
