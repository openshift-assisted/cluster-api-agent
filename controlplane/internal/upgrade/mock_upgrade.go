// Code generated by MockGen. DO NOT EDIT.
// Source: upgrade.go

// Package upgrade is a generated GoMock package.
package upgrade

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClusterUpgradeFactory is a mock of ClusterUpgradeFactory interface.
type MockClusterUpgradeFactory struct {
	ctrl     *gomock.Controller
	recorder *MockClusterUpgradeFactoryMockRecorder
}

// MockClusterUpgradeFactoryMockRecorder is the mock recorder for MockClusterUpgradeFactory.
type MockClusterUpgradeFactoryMockRecorder struct {
	mock *MockClusterUpgradeFactory
}

// NewMockClusterUpgradeFactory creates a new mock instance.
func NewMockClusterUpgradeFactory(ctrl *gomock.Controller) *MockClusterUpgradeFactory {
	mock := &MockClusterUpgradeFactory{ctrl: ctrl}
	mock.recorder = &MockClusterUpgradeFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterUpgradeFactory) EXPECT() *MockClusterUpgradeFactoryMockRecorder {
	return m.recorder
}

// NewUpgrader mocks base method.
func (m *MockClusterUpgradeFactory) NewUpgrader(kubeConfig []byte) (ClusterUpgrade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpgrader", kubeConfig)
	ret0, _ := ret[0].(ClusterUpgrade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUpgrader indicates an expected call of NewUpgrader.
func (mr *MockClusterUpgradeFactoryMockRecorder) NewUpgrader(kubeConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpgrader", reflect.TypeOf((*MockClusterUpgradeFactory)(nil).NewUpgrader), kubeConfig)
}

// MockClusterUpgrade is a mock of ClusterUpgrade interface.
type MockClusterUpgrade struct {
	ctrl     *gomock.Controller
	recorder *MockClusterUpgradeMockRecorder
}

// MockClusterUpgradeMockRecorder is the mock recorder for MockClusterUpgrade.
type MockClusterUpgradeMockRecorder struct {
	mock *MockClusterUpgrade
}

// NewMockClusterUpgrade creates a new mock instance.
func NewMockClusterUpgrade(ctrl *gomock.Controller) *MockClusterUpgrade {
	mock := &MockClusterUpgrade{ctrl: ctrl}
	mock.recorder = &MockClusterUpgradeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterUpgrade) EXPECT() *MockClusterUpgradeMockRecorder {
	return m.recorder
}

// GetCurrentVersion mocks base method.
func (m *MockClusterUpgrade) GetCurrentVersion(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentVersion", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentVersion indicates an expected call of GetCurrentVersion.
func (mr *MockClusterUpgradeMockRecorder) GetCurrentVersion(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentVersion", reflect.TypeOf((*MockClusterUpgrade)(nil).GetCurrentVersion), ctx)
}

// IsDesiredVersionUpdated mocks base method.
func (m *MockClusterUpgrade) IsDesiredVersionUpdated(ctx context.Context, desiredVersion string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDesiredVersionUpdated", ctx, desiredVersion)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDesiredVersionUpdated indicates an expected call of IsDesiredVersionUpdated.
func (mr *MockClusterUpgradeMockRecorder) IsDesiredVersionUpdated(ctx, desiredVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDesiredVersionUpdated", reflect.TypeOf((*MockClusterUpgrade)(nil).IsDesiredVersionUpdated), ctx, desiredVersion)
}

// IsUpgradeInProgress mocks base method.
func (m *MockClusterUpgrade) IsUpgradeInProgress(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpgradeInProgress", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUpgradeInProgress indicates an expected call of IsUpgradeInProgress.
func (mr *MockClusterUpgradeMockRecorder) IsUpgradeInProgress(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpgradeInProgress", reflect.TypeOf((*MockClusterUpgrade)(nil).IsUpgradeInProgress), ctx)
}

// UpdateClusterVersionDesiredUpdate mocks base method.
func (m *MockClusterUpgrade) UpdateClusterVersionDesiredUpdate(ctx context.Context, desiredVersion string, options ...ClusterUpgradeOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, desiredVersion}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterVersionDesiredUpdate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterVersionDesiredUpdate indicates an expected call of UpdateClusterVersionDesiredUpdate.
func (mr *MockClusterUpgradeMockRecorder) UpdateClusterVersionDesiredUpdate(ctx, desiredVersion interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, desiredVersion}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterVersionDesiredUpdate", reflect.TypeOf((*MockClusterUpgrade)(nil).UpdateClusterVersionDesiredUpdate), varargs...)
}
