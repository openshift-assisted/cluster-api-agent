// Code generated by MockGen. DO NOT EDIT.
// Source: openshift.go

// Package version is a generated GoMock package.
package version

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKubernetesVersionDetector is a mock of KubernetesVersionDetector interface.
type MockKubernetesVersionDetector struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesVersionDetectorMockRecorder
}

// MockKubernetesVersionDetectorMockRecorder is the mock recorder for MockKubernetesVersionDetector.
type MockKubernetesVersionDetectorMockRecorder struct {
	mock *MockKubernetesVersionDetector
}

// NewMockKubernetesVersionDetector creates a new mock instance.
func NewMockKubernetesVersionDetector(ctrl *gomock.Controller) *MockKubernetesVersionDetector {
	mock := &MockKubernetesVersionDetector{ctrl: ctrl}
	mock.recorder = &MockKubernetesVersionDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesVersionDetector) EXPECT() *MockKubernetesVersionDetectorMockRecorder {
	return m.recorder
}

// GetKubernetesVersion mocks base method.
func (m *MockKubernetesVersionDetector) GetKubernetesVersion(imageRef, pullsecret string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubernetesVersion", imageRef, pullsecret)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKubernetesVersion indicates an expected call of GetKubernetesVersion.
func (mr *MockKubernetesVersionDetectorMockRecorder) GetKubernetesVersion(imageRef, pullsecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubernetesVersion", reflect.TypeOf((*MockKubernetesVersionDetector)(nil).GetKubernetesVersion), imageRef, pullsecret)
}
